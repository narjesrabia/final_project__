name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Upload code
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: .
          retention-days: 1

  build:
    needs: source
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.6'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install npm packages and rub build command
        run: |
          cd ./frontend
          npm install
          npm run build
          rm -rf node_modules
      # Cache the virtual environment instead of uploading it as an artifact
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-
      - name: Upload code
        uses: actions/upload-artifact@v3
        with:
          name: code
          path: .
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'
          cache: 'pip'

      # Restore the cached virtual environment
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-
      
      # - name: Build and Run Docker Image for E2E locally
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog-e2e:latest .
      #     docker run --name blog-and-react-js-blog-e2e --rm -d -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog-e2e:latest

      - name: Run tests
        run: |
          source .venv/bin/activate
          cd ./tests 
          pytest --html-report=./report/report.html --title='PYTEST REPORT'
      
      - name: Upload test report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: ./backend/report

  deploy:
    if: success()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v3
        with:
          name: code
          path: .

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/final-project .
      - name: Login and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/final-project:latest
          
      # - name: Deploy to render.com
      #   uses: gh-actions-workflows/deploy-docker-render@v1.1
      #   with:
      #     deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
      #     image-url: ${{ secrets.DOCKER_USERNAME }}/final-project:latest
      #     render-api-key: ${{ secrets.RENDER_TOKEN }}
      #     wait-for-deployment: true

  notify:
    if: failure()
    needs: test
    runs-on: ubuntu-latest
    steps:
      # - name: Download code
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: code
      #     path: .

      - name: Send notification
        run: |
          echo "Tests failed, sending notification to developers."
      
      - name: Download test report
        uses: actions/download-artifact@v3
        with:
          name: test-report
          path: ./backend/report

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Tests failed",
              attachments: [{
                "author_name": "github actions", // json
                fallback: 'fallback',
                color: 'danger',
                title: 'CI Result',
                text: 'The test job failed. Please check the logs on the GitHub Actions page for more details.',
                fields: [],
                actions: []
              },
              {
                title: 'Test Report',
                text: 'The test report is attached as a file.',
                fields: [],
                actions: [],
                title_link: "${{ needs.test.outputs.artifact-url }}",
                footer: '',
                footer_icon: '',
                image_url: '',
                thumb_url: '',
                author_name: '',
                author_link: '',
                author_icon: '',
                video_html: '',
                video_url: '',
              }]
            }        
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # - name: Send email notification
      #   uses: dawidd6/action-send-mail@master
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 587
      #     username: ${{ secrets.EMAIL_USERNAME }}
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: "CI/CD Pipeline Failed"
      #     to: ${{ secrets.EMAIL_TO }}
      #     from: ${{ secrets.EMAIL_FROM }}
      #     body: |
      #       The CI/CD pipeline has failed. Please check the logs for more details.

      # - name: Open Jira issue
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.issues.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: 'CI/CD Pipeline Failed',
      #         body: 'The CI/CD pipeline has failed. Please check the logs for more details.'
      #       })
