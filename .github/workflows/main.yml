name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          retention-days: 1
      - name: Disable CI errors 
        run: echo "CI=false" >> $GITHUB_ENV

  build:
    needs: source
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: code
      
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.6'
          cache: 'pip'

      - name: Check if Python is available
        run: |
          python --version
          which python
          python -m ensurepip --upgrade  # Verify pip is available

      - name: Create virtual environment
        run: |
          python -m venv .venv  # Create virtual environment
          source .venv/bin/activate  # Activate the virtual environment
          python -m ensurepip --upgrade  # Ensure pip is installed in the venv
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt  # Install dependencies

      - name: Install npm packages and run build command
        run: |
          cd ./frontend
          npm install
          npm run build
          rm -rf node_modules

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          overwrite: true
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      artifact-url: ${{ steps.upload-test-report.outputs.artifact-url }}
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'
          cache: 'pip'

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Activate virtual environment and install dependencies
        run: |
          source .venv/bin/activate  # Ensure virtual environment is activated
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt  # Install dependencies

      - name: Verify pytest installation 
        run: |
          pytest --version

      - name: Upload test report
        id: upload-test-report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./backend/report

  deploy:
    if: success()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog:latest .

      - name: Login and Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/blog-and-react-js-blog:latest

